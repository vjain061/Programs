1. How to convert list of object to map?

   createPeople().stream().
   .collect(toMap(Person::getName, Person::getAge));
                     or
   createPeople().stream().
   .collect(toMap(person -> person.getName(), person -> person.getAge()));

Note -> where createPeople() is a method which will retrun a list of person object which is having two attributes (Name and Age).

2. How to get comma separate value for a list of object?

   createPeople().stream()
      .filter(person -> person.getAge() > 30)
      .map(Person::getName)
      .map(String::toUpperCase)
      .collect(joining(", "))

3. What is partitioningBy() method?
   To take a collection and split it into two different parts and we can use various criteria to do this.
   
   createPeople().stream()
      .collect(partitioningBy(person -> person.getAge() % 2 == 0))
      
4. https://medium.com/javarevisited/java-8-parallel-stream-java2blog-e1254e593763      

5. Map and FlatMap is for transformation of given collection.
Example :- let say you have give list of student and student contains name and list of marks. 
Now you asked to add 10 in each student marks in each subject and return updated list of students.

Answer :-
List<Student> result = students.stream().map(it -> new Student(it.name, it.marks.stream().map(ti->ti+10).toList())).toList();

6. What is the uses of flatmap function.
if list<list> something kuch he and usko iterate krna he to flatmap use kr skte he
Flattening is referred to as merging multiple collections/arrays into one
Here is the example :- Get the unique surnames in uppercase of the first 15 book authors that are 50 years old or older.

        List<String> result = libraries.stream()
                .flatMap(it -> it.books.stream())
                .map(it -> it.author)
                .filter(it -> it.age>28)
                .map(it -> it.surname)
                .collect(Collectors.toList());

7. Print out the sum of ages of all female authors younger than 25.

        int result = libraries.stream()
                .flatMap(it -> it.books.stream())
                .filter(it -> it.author.age<25)
                .filter(it -> it.author.gender.equals("Female"))
                .map(it -> it.author.age)
                .reduce(0, Integer::sum);


















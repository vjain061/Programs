Overriding 
1. Method signiture is all about method parameter, name only.

2. wait(), notify(), notifyAll() methods we can use only in synchronized block.

3. Composition is strong entity and Aggregation is weak entity.

4. Object class methods (toString(), equals(), hashCode(), wait(), notify(), notifyAll(), clone(), finalized(), getClass()).

5. Overriding rule for throws keyword.
	(5.1) -> If parent method is throwing checked exception then in overriding method we can throws (Unchecked, Child, Same).
	(5.2) -> If parent method is throwing Un-checked exception then in overriding method we can throws (Parent, Child, Same).
	(5.3) -> Child method can not throws checked exception if parent class method is not throwing same or parent exception 
			 in this case we will get compile time error.
	(5.4) -> But in case of un-checked exception point number (5.3) is not applicable.
	
6. Overriding rule for return type of overridden method.
	(6.1) -> If parent class method is returning String object then overridden method can not return void.
	(6.2) -> If parent class method is returning Object type object then overridden method can return any type object or void.
	
7. Which of the following methods make thread leave the running state?
	wait()
	sleep(1000)
	Thread.join()
	
8. Assume the following method is properly synchronized and called from a thread A on an object B:
   wait(2000);
   After calling this method, when will the thread A become a candidate to get another turn at the CPU?
   
   ANS:- After thread A is notified, or after two seconds.
   
9. Which of these points will be valid If superclass method does not throw any exception
	a.overridden method of subclass can throw any RuntimeException 
	b.overridden method of subclass cannot throw any checked exception
	c.overridden method of subclass may not throw any exception.
	d.All
	
10. If you are creating any string at run time then it will create string in HEAP area 
	Example :- 
		String s = "vaibhav"; //object will creat in SCP(String Constant Pool)
		s.concat("jain"); //object vaibhavjain will be created in HEAP area becuase we are creating it at run time.

11. Private >> Default >> Protected >> Public
	a. private can be accesable inside class itself.
	b. default can be accesable inside package.
	c. protected can be accesable inside subclass.
	d. public can be accesable in everywhere in the application.
		
 

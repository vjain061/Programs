Map<String, String> map = new HashMap<String, String>();
map.put("first", "first");
map.put("second", "second");
map.put("third", "third");// 8

map.put("first", "1");

System.out.println(map.get("first"));


0-15


    12
1       14
    13      15


---------------------------------------------------------------------------------

String a = "abc";   // SCP
String b = new String("abc");   // Heap
String c = "abc";

String d = b.append("d");   // SCP "abcd"
String d = "abcd";


---------------------------------------------------------------------------------

final Class Student {
    final private int id;
    final private String name;
    final private HashMap map;

    public Student(int id, String name, HashMap<String, String> map) {
        this.id = id;
        this.name = name;
        this.map = map;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public HashMap getMap() {
        return map;
    }
 
    main() {
        Student s = new Student(1, "abc");
        s.id = 10;

        s.name = s.getName().append("xyz");  //abcxyz
    }
}

---------------------------------------------------------------------------------

class Sample {
    Sample sample = null;
    private Sample() {

    }

    public Sample getInstance() {
        synchornized (this) {
            if (sample == null) {
                return new Simple();
            }
        }
        sample;
    }

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

Write a SQL query to find employees who have the highest salary in each of the departments.

select d.Name, e.Name, e.Salary from Employee e, Department d where e.DepartmentId = d.Id group by d.Name having e.Salary in (select max(salary) from Employee group by d.Name);

Employee

+----+-------+--------+--------------+

| Id | Name | Salary | DepartmentId |

+----+-------+--------+--------------+

| 1 | Joe | 70000 | 1 |

| 2 | Jim | 90000 | 1 |

| 3 | Henry | 80000 | 2 |

| 4 | Sam | 60000 | 2 |

| 5 | Max | 90000 | 1 |

+----+-------+--------+--------------+

Department

+----+----------+

| Id | Name |

+----+----------+

| 1 | IT |

| 2 | Sales |

+----+----------+

Answer

+------------+----------+--------+

| Department | Employee | Salary |

+------------+----------+--------+

| IT | Max | 90000 |

| IT | Jim | 90000 |

| Sales | Henry | 80000 |

+------------+----------+--------+

------------------------------------------------------------------------------------------------------------------------------------------------------------------


a -> b -> c
            -> d -> e
    p -> q
first   a 
second 
10, 20, 30 , 50
40 , 5,  50 

----------------------------------------------------------------------------------------------------------------

Java - HashMap, Hashtable, Concurrent HashMap, Cycli barrier, Count down latch, Deadlick, Livelock, race condition, design patterns 
Algorithm - Finding minimum all the time from a stream of charcters, kth minimum
Database - bank transaction design, Transpose table, nth maximum salary

Atomic vs Volatile

---------------------------------------------------------------------------------------------------------------------------------------------

List<Employee> employee;

id name salary

employee.stream().sort(Collection.sort(new Comparator<Employee>(
	new compare(employee e, employee e2) {
		e.salary.compareTo(e1.salary);
	}
))).collec().get(0);



A B C D E

sitting in circle

int p_count = 5;


//c linkedlist A B C D E

      	       1 2 3 4 1 

A|100  B|200 C|300 D|400 E|000

A|200  C|300 D|400 E|000

  C|300  E|200

  C|200  


int count = 5;4 3 2
Node head = createList();
Node temp = head;

while (count > 0) {
	temp.next;= temp.next.next;
	count--;
	temp = temp.next;	
}



@Entity("Employee")
class Employee {
	@Id
	private int id;
	
	@OneToOne
	private Department d_id;
}


Thread.join() we can use to eliminate race condition.

-----------------------------------------------------------------------------------------------------------------------------------

In final interview he asked about how to find sortest path in 2D array it was like delivery boy want to deliver very fast.

-----------------------------------------------------------------------------------------------------------------------------------

1. @Transactional in hibernate.
2. Name annotation which you have used in spring.
3. Advantages of spring boot.
4. singleton vs prototype bean.
5. diff types of beans in spring.
6. Create countdownlatch for calling 4 database call from single callable.
7. types of executors frameworks.
8. "I am vaibhav" reverse it like "vaibhav am I" with out using list collections, split method.
9. diff between requestparam and pathparam.
10. 


















